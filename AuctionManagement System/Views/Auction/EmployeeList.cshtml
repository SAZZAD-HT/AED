@{
    ViewData["Title"] = "Employee List";
}
<style>
    body {
        font-family: 'Montserrat', sans-serif;
        background-color: #0e2b63; /* Background color as requested */
        color: black; /* Text color for better readability */
    }

    tr:hover {
        background-color: #00b1eb; /* Light blue background on hover */
        transition: background-color 0.3s ease;
    }

    .selected {
        transform: scale(1.05); /* Slightly enlarge the row */
        transition: transform 0.3s ease-in-out;
    }

    .pl {
        width: 6em;
        height: 6em;
    }

    .pl__ring {
        animation: ringA 2s linear infinite;
    }

    .pl__ring--a {
        stroke: #f42f25;
    }

    .pl__ring--b {
        animation-name: ringB;
        stroke: #f49725;
    }

    .pl__ring--c {
        animation-name: ringC;
        stroke: #255ff4;
    }

    .pl__ring--d {
        animation-name: ringD;
        stroke: #f42582;
    }

    /* Animations */
    @@keyframes ringA {
        from, 4% {
            stroke-dasharray: 0 660;
            stroke-width: 20;
            stroke-dashoffset: -330;
        }

        12% {
            stroke-dasharray: 60 600;
            stroke-width: 30;
            stroke-dashoffset: -335;
        }

        32% {
            stroke-dasharray: 60 600;
            stroke-width: 30;
            stroke-dashoffset: -595;
        }

        40%, 54% {
            stroke-dasharray: 0 660;
            stroke-width: 20;
            stroke-dashoffset: -660;
        }

        62% {
            stroke-dasharray: 60 600;
            stroke-width: 30;
            stroke-dashoffset: -665;
        }

        82% {
            stroke-dasharray: 60 600;
            stroke-width: 30;
            stroke-dashoffset: -925;
        }

        90%, to {
            stroke-dasharray: 0 660;
            stroke-width: 20;
            stroke-dashoffset: -990;
        }
    }

    @@keyframes ringB {
        from, 12% {
            stroke-dasharray: 0 220;
            stroke-width: 20;
            stroke-dashoffset: -110;
        }

        20% {
            stroke-dasharray: 20 200;
            stroke-width: 30;
            stroke-dashoffset: -115;
        }

        40% {
            stroke-dasharray: 20 200;
            stroke-width: 30;
            stroke-dashoffset: -195;
        }

        48%, 62% {
            stroke-dasharray: 0 220;
            stroke-width: 20;
            stroke-dashoffset: -220;
        }

        70% {
            stroke-dasharray: 20 200;
            stroke-width: 30;
            stroke-dashoffset: -225;
        }

        90% {
            stroke-dasharray: 20 200;
            stroke-width: 30;
            stroke-dashoffset: -305;
        }

        98%, to {
            stroke-dasharray: 0 220;
            stroke-width: 20;
            stroke-dashoffset: -330;
        }
    }

    @@keyframes ringC {
        from {
            stroke-dasharray: 0 440;
            stroke-width: 20;
            stroke-dashoffset: 0;
        }

        8% {
            stroke-dasharray: 40 400;
            stroke-width: 30;
            stroke-dashoffset: -5;
        }

        28% {
            stroke-dasharray: 40 400;
            stroke-width: 30;
            stroke-dashoffset: -175;
        }

        36%, 58% {
            stroke-dasharray: 0 440;
            stroke-width: 20;
            stroke-dashoffset: -220;
        }

        66% {
            stroke-dasharray: 40 400;
            stroke-width: 30;
            stroke-dashoffset: -225;
        }

        86% {
            stroke-dasharray: 40 400;
            stroke-width: 30;
            stroke-dashoffset: -395;
        }

        94%, to {
            stroke-dasharray: 0 440;
            stroke-width: 20;
            stroke-dashoffset: -440;
        }
    }

    @@keyframes ringD {
        from, 8% {
            stroke-dasharray: 0 440;
            stroke-width: 20;
            stroke-dashoffset: 0;
        }

        16% {
            stroke-dasharray: 40 400;
            stroke-width: 30;
            stroke-dashoffset: -5;
        }

        36% {
            stroke-dasharray: 40 400;
            stroke-width: 30;
            stroke-dashoffset: -175;
        }

        44%, 50% {
            stroke-dasharray: 0 440;
            stroke-width: 20;
            stroke-dashoffset: -220;
        }

        58% {
            stroke-dasharray: 40 400;
            stroke-width: 30;
            stroke-dashoffset: -225;
        }

        78% {
            stroke-dasharray: 40 400;
            stroke-width: 30;
            stroke-dashoffset: -395;
        }

        86%, to {
            stroke-dasharray: 0 440;
            stroke-width: 20;
            stroke-dashoffset: -440;
        }
    }
</style>
<div class="container mx-auto p-6">
    <!-- Search Bar -->
    <form id="searchForm" class="mb-6">
        <div class="flex items-center">
            <input type="text" id="employeeCodeInput" name="employeeCode" placeholder="Enter Employee Code" class="border-2 border-gray-300 p-2 rounded-md w-full" />
            <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded-md ml-4 hover:bg-blue-700">
                Search
            </button>
        </div>
    </form>

    <!-- Loader -->
    

    <!-- Employee Table -->
    <div class="overflow-x-auto mt-6">
        <table class="min-w-full table-auto bg-white border border-gray-300">
            <thead class="bg-gray-200">
                <tr>
                    <th class="px-4 py-2">Employee Code</th>
                    <th class="px-4 py-2">Name</th>
                    <th class="px-4 py-2">Designation</th>
                    <th class="px-4 py-2">Department</th>
                    <th class="px-4 py-2">Location</th>
                    <th class="px-4 py-2">Mobile Number</th>
                    <th class="px-4 py-2">Email</th>
                </tr>
            </thead>
            
            <tbody id="employeeTableBody">
                <!-- JavaScript will populate this -->
            </tbody>
        </table>
    </div>
    <div>
        <h1></h1>
    </div>
    <div class="bg-white text-black shadow-md rounded-lg p-6 max-w-7xl w-full overflow-x-auto">
        <div id="loader" class="flex justify-center items-center">
            <svg class="pl" width="240" height="240" viewBox="0 0 240 240">
                <circle class="pl__ring pl__ring--a" cx="120" cy="120" r="105" fill="none" stroke="#000" stroke-width="20" stroke-dasharray="0 660" stroke-dashoffset="-330" stroke-linecap="round"></circle>
                <circle class="pl__ring pl__ring--b" cx="120" cy="120" r="35" fill="none" stroke="#000" stroke-width="20" stroke-dasharray="0 220" stroke-dashoffset="-110" stroke-linecap="round"></circle>
                <circle class="pl__ring pl__ring--c" cx="85" cy="120" r="70" fill="none" stroke="#000" stroke-width="20" stroke-dasharray="0 440" stroke-linecap="round"></circle>
                <circle class="pl__ring pl__ring--d" cx="155" cy="120" r="70" fill="none" stroke="#000" stroke-width="20" stroke-dasharray="0 440" stroke-linecap="round"></circle>
            </svg>
        </div>

    <p id="noResultsMessage" class="text-center text-gray-600 mt-4 hidden">No employees found</p>
</div>

<script>
    // Function to show/hide loader
    function toggleLoader(show) {
        const loader = document.getElementById('loader');
        if (show) {
            loader.classList.remove('hidden');
        } else {
            loader.classList.add('hidden');
        }
    }

    // Function to fetch and render employee data
    async function fetchEmployeeData(employeeCode = '') {
        toggleLoader(true); // Show loader while fetching

        const url = `/Auction/EmployeeListJSON?employeeCode=${employeeCode}`;
        const response = await fetch(url);
        const employees = await response.json();

        const tableBody = document.getElementById('employeeTableBody');
        const noResultsMessage = document.getElementById('noResultsMessage');

        // Clear existing table data
        tableBody.innerHTML = '';

        if (employees.length > 0) {
            noResultsMessage.classList.add('hidden');

            // Populate table with new data
            employees.forEach(employee => {
                const row = `<tr class="border-t border-gray-300">
                        <td class="px-4 py-2">${employee.employeeCode ?? 'N/A'}</td>
                        <td class="px-4 py-2">${employee.name ?? 'N/A'}</td>
                        <td class="px-4 py-2">${employee.desigination ?? 'N/A'}</td>
                        <td class="px-4 py-2">${employee.department ?? 'N/A'}</td>
                        <td class="px-4 py-2">${employee.location ?? 'N/A'}</td>
                        <td class="px-4 py-2">${employee.mobileNumber ?? 'N/A'}</td>
                        <td class="px-4 py-2">${employee.email ?? 'N/A'}</td>
                    </tr>`;
                tableBody.insertAdjacentHTML('beforeend', row);
            });
        } else {
            noResultsMessage.classList.remove('hidden');
        }

        toggleLoader(false); // Hide loader when done
    }

    // Handle form submission
    document.getElementById('searchForm').addEventListener('submit', function (event) {
        event.preventDefault();  // Prevent form from submitting the traditional way
        const employeeCode = document.getElementById('employeeCodeInput').value;
        fetchEmployeeData(employeeCode);
    });

    // Call the API when the page loads to display all employees
    document.addEventListener('DOMContentLoaded', function () {
        fetchEmployeeData();  // Fetch all employees when the page loads
    });
</script>

<style>
    .loader {
        border-top-color: #3498db;
        animation: spin 1s infinite linear;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }
</style>
